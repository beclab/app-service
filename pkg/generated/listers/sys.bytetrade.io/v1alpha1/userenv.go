// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "bytetrade.io/web3os/app-service/api/sys.bytetrade.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserEnvLister helps list UserEnvs.
// All objects returned here must be treated as read-only.
type UserEnvLister interface {
	// List lists all UserEnvs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserEnv, err error)
	// UserEnvs returns an object that can list and get UserEnvs.
	UserEnvs(namespace string) UserEnvNamespaceLister
	UserEnvListerExpansion
}

// userEnvLister implements the UserEnvLister interface.
type userEnvLister struct {
	indexer cache.Indexer
}

// NewUserEnvLister returns a new UserEnvLister.
func NewUserEnvLister(indexer cache.Indexer) UserEnvLister {
	return &userEnvLister{indexer: indexer}
}

// List lists all UserEnvs in the indexer.
func (s *userEnvLister) List(selector labels.Selector) (ret []*v1alpha1.UserEnv, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserEnv))
	})
	return ret, err
}

// UserEnvs returns an object that can list and get UserEnvs.
func (s *userEnvLister) UserEnvs(namespace string) UserEnvNamespaceLister {
	return userEnvNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserEnvNamespaceLister helps list and get UserEnvs.
// All objects returned here must be treated as read-only.
type UserEnvNamespaceLister interface {
	// List lists all UserEnvs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserEnv, err error)
	// Get retrieves the UserEnv from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserEnv, error)
	UserEnvNamespaceListerExpansion
}

// userEnvNamespaceLister implements the UserEnvNamespaceLister
// interface.
type userEnvNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserEnvs in the indexer for a given namespace.
func (s userEnvNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserEnv, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserEnv))
	})
	return ret, err
}

// Get retrieves the UserEnv from the indexer for a given namespace and name.
func (s userEnvNamespaceLister) Get(name string) (*v1alpha1.UserEnv, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userenv"), name)
	}
	return obj.(*v1alpha1.UserEnv), nil
}
