// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "bytetrade.io/web3os/app-service/api/app.bytetrade.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImageManagerLister helps list ImageManagers.
// All objects returned here must be treated as read-only.
type ImageManagerLister interface {
	// List lists all ImageManagers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageManager, err error)
	// Get retrieves the ImageManager from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ImageManager, error)
	ImageManagerListerExpansion
}

// imageManagerLister implements the ImageManagerLister interface.
type imageManagerLister struct {
	indexer cache.Indexer
}

// NewImageManagerLister returns a new ImageManagerLister.
func NewImageManagerLister(indexer cache.Indexer) ImageManagerLister {
	return &imageManagerLister{indexer: indexer}
}

// List lists all ImageManagers in the indexer.
func (s *imageManagerLister) List(selector labels.Selector) (ret []*v1alpha1.ImageManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageManager))
	})
	return ret, err
}

// Get retrieves the ImageManager from the index for a given name.
func (s *imageManagerLister) Get(name string) (*v1alpha1.ImageManager, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imagemanager"), name)
	}
	return obj.(*v1alpha1.ImageManager), nil
}
