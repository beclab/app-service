// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "bytetrade.io/web3os/app-service/api/sys.bytetrade.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSystemEnvs implements SystemEnvInterface
type FakeSystemEnvs struct {
	Fake *FakeSysV1alpha1
}

var systemenvsResource = v1alpha1.SchemeGroupVersion.WithResource("systemenvs")

var systemenvsKind = v1alpha1.SchemeGroupVersion.WithKind("SystemEnv")

// Get takes name of the systemEnv, and returns the corresponding systemEnv object, and an error if there is any.
func (c *FakeSystemEnvs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.SystemEnv, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(systemenvsResource, name), &v1alpha1.SystemEnv{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SystemEnv), err
}

// List takes label and field selectors, and returns the list of SystemEnvs that match those selectors.
func (c *FakeSystemEnvs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.SystemEnvList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(systemenvsResource, systemenvsKind, opts), &v1alpha1.SystemEnvList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.SystemEnvList{ListMeta: obj.(*v1alpha1.SystemEnvList).ListMeta}
	for _, item := range obj.(*v1alpha1.SystemEnvList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested systemEnvs.
func (c *FakeSystemEnvs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(systemenvsResource, opts))
}

// Create takes the representation of a systemEnv and creates it.  Returns the server's representation of the systemEnv, and an error, if there is any.
func (c *FakeSystemEnvs) Create(ctx context.Context, systemEnv *v1alpha1.SystemEnv, opts v1.CreateOptions) (result *v1alpha1.SystemEnv, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(systemenvsResource, systemEnv), &v1alpha1.SystemEnv{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SystemEnv), err
}

// Update takes the representation of a systemEnv and updates it. Returns the server's representation of the systemEnv, and an error, if there is any.
func (c *FakeSystemEnvs) Update(ctx context.Context, systemEnv *v1alpha1.SystemEnv, opts v1.UpdateOptions) (result *v1alpha1.SystemEnv, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(systemenvsResource, systemEnv), &v1alpha1.SystemEnv{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SystemEnv), err
}

// Delete takes name of the systemEnv and deletes it. Returns an error if one occurs.
func (c *FakeSystemEnvs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(systemenvsResource, name, opts), &v1alpha1.SystemEnv{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSystemEnvs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(systemenvsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.SystemEnvList{})
	return err
}

// Patch applies the patch and returns the patched systemEnv.
func (c *FakeSystemEnvs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.SystemEnv, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(systemenvsResource, name, pt, data, subresources...), &v1alpha1.SystemEnv{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SystemEnv), err
}
